swagger: "2.0"
################################################################################
#                              API Information                                 #
################################################################################
# Provides metadata about the API.
info:
  version: v1
  title: CAF Audit Management Service
  description: |
    The CAF Audit Managament Service will facilitate the registration of both
    application defined audit events XML and new tenants.

    The applications endpoint should be used to register the audit events XML
    file defined for each application. The XML along with the application mapping
    will be stored in the Vertica database.

    The tenants endpoint should be used to add new tenants. One or more
    applications can be specified when adding a new tenant. This will result
    in application specific storage tables being created under tenant specific
    schemas in the Vertica database.

    ### XML Audit Events File

    Applications will define audit events that will occur in the system in an
    XML audit event file. A sample XML is included [here.](https://rndwiki.corp.hpecorp.net/confluence/pages/viewpage.action?title=Auditing&spaceKey=CAF)


    `AuditedApplication` is the root element. `ApplicationId` identifies the name
    of the application that the audit event type is associated with. The database
    table created by the tenants API endpoint will derive it's name from this
    `ApplicationId` and will be created in a database schema named after the tenant.
    For each audit event defined, `TypeId` is a string identifier for the
    particular event (e.g. viewDocument) and `CategoryId` is a string identifier
    for the category of event. A list of parameter elements are then defined for
    each audit event. This includes the name of the parameter, the type (i.e.
    string, short, int, long, float, double, boolean or date), description and
    an optional `ColumnName` element which identifies an alternative database
    column to be used for storage in the event that multiple audit events
    comprise of parameters with the same name. The column names created by the
    API for audit event parameters is taken from either the `ColumnName` or `Name`.
    Each is also prefixed with 'eventParam'.

    ### Vertica Database Connection

    The API connects to the Vertica analytical database server via JDBC. The following connection
    properties need to be supplied:

    `CAF_DATABASE_URL` - the Vertica database connection string URL with format:
    jdbc:vertica://VerticaHost:portNumber/databaseName

    `CAF_DATABASE_SERVICE_ACCOUNT` - the name of the Vertica database account used by the CAF Audit Management Service to access the Vertica database. E.g. caf-audit-service

    `CAF_DATABASE_SERVICE_ACCOUNT_PASSWORD` - the password of the Vertica database account used by the CAF Audit Management Service to access the Vertica database.

    `CAF_DATABASE_LOADER_ACCOUNT` - the name of the Vertica database account used to configure the loading of data from Kafka into Vertica. E.g. caf-audit-loader

    `CAF_DATABASE_LOADER_ACCOUNT_PASSWORD` - the password of the Vertica database account used to configure the loading of data from Kafka into Vertica.

    `CAF_DATABASE_READER_ROLE` - the name of the Vertica database role that will be used for reporting users. E.g. caf-audit-read

    ### Kafka Connection

    The API connects to the Kafka server. The following property needs to be supplied:

    `CAF_KAFKA_BROKERS` - the address of the Kafka broker. E.g. 192.168.56.20:9092

    ### Vertica Audit Schedulers

    The API configures and launches Vertica audit schedulers. These schedulers can be launched using Docker or Marathon.
    For launch using Docker, the following properties needs to be supplied:

    `CAF_AUDIT_MANAGEMENT_CLI` - the Docker container used to launch the scheduler.

    `DOCKER_HOST` - the machine on which the container runs.

    For launch using Marathon, the following properties needs to be supplied:

    `CAF_AUDIT_MANAGEMENT_CLI` - the Docker container used to launch the scheduler.

    `CAF_AUDIT_SCHEDULER_MARATHON_CONTAINER_DOCKER_CREDENTIALS` - the docker credentials file.

    `CAF_AUDIT_SCHEDULER_MARATHON_CONTAINER_DOCKER_FORCEPULLIMAGE` - the forcePullImage setting of each audit scheduler container.

    `CAF_AUDIT_SCHEDULER_MARATHON_CONTAINER_DOCKER_NETWORK` - the network type of each audit scheduler container.

    `CAF_AUDIT_SCHEDULER_MARATHON_CPUS` - the amount of CPU of each audit scheduler container.

    `CAF_AUDIT_SCHEDULER_MARATHON_MEM` - the amount of RAM of each audit scheduler container.

    `CAF_MARATHON_URL` - the endpoint of Marathon REST API.

    Docker, Kafka, Marathon and Vertica properties can be provided through system environment variables or can be collectively
    initialized in a config.properties file with a new system environment variable created,
    `CAF_AUDIT_MANAGEMENT_API_CONFIG_PATH`, which points to the directory containing the properties
    file.

basePath: /caf-audit-management/v1
################################################################################
#                                   Paths                                      #
################################################################################
# The available paths and operations for the API.
paths:
  /applications:
    post:
      description: Used to register application defined audit events XML in the Vertica database.
      tags:
        - Applications
      summary: Adds a new application
      consumes:
        - multipart/form-data
      parameters:
        - name: file
          type: file
          in: formData
          required: true
          description: XML file which defines the audit events in use by the application.
      responses:
        200:
          description: Ok
        400:
          description: Bad Request (missing database connection properties or unexpected/invalid XML)
        500:
          description: Internal server error
  /tenants:
    post:
      description: Used to register and create the Vertica database schema for a new tenant.
      tags:
        - Tenants
      summary: Adds a new tenant
      parameters:
        - name: tenantId
          type: string
          in: query
          required: true
          description: Identifies the tenant.
        - name: application
          type: array
          items:
            type: string
          in: query
          required: true
          description: Identifies the application(s) that the tenant is to be registered with.
      responses:
        200:
          description: Ok
        400:
          description: Bad Request (missing database connection properties)
        500:
          description: Internal server error
