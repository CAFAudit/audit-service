swagger: "2.0"
################################################################################
#                              API Information                                 #
################################################################################
# Provides metadata about the API.
info:
  version: v1
  title: CAF Audit Management API
  description: |
    The CAF Audit Managament API will facilitate the registration of both
    application defined audit events XML and new tenants.

    The applications endpoint should be used to register or modify the audit
    events XML file defined for each application. The XML along with the
    application mapping will be stored in the Vertica database.

    The tenants endpoint should be used to add new tenants. One or more
    applications can be specified when adding a new tenant. This will result
    in application specific storage tables being created under tenant specific
    schemas in the Vertica database.

    #### XML Audit Events File

    Applications will define audit events that will occur in the system in an
    XML audit event file. A sample XML is included next:
    ```
    <AuditedApplication xmlns="http://www.hpe.com/CAF/Auditing/Schema/AuditedApplication.xsd">
      <ApplicationId>ProductX</ApplicationId>
      <AuditEvents>
        <AuditEvent>
          <TypeId>viewDocument</TypeId>
          <CategoryId>documentEvents</CategoryId>
          <Params>
            <Param>
              <Name>docId</Name>
              <Type>long</Type>
              <Description>Document identifier</Description>
            </Param>
          </Params>
        </AuditEvent>
        <AuditEvent>
          <TypeId>policyApplied</TypeId>
          <CategoryId>policyEvents</CategoryId>
          <Params>
            <Param>
              <Name>policyId</Name>
              <Type>long</Type>
              <Description>Policy identifier</Description>
            </Param>
            <Param>
              <Name>policyName</Name>
              <Type>string</Type>
              <Description>Policy Name</Description>
            </Param>
            <Param>
              <Name>policyDef</Name>
              <Type>string</Type>
              <ColumnName>policyDefinition</ColumnName>
              <Description>Policy definition</Description>
            </Param>
          </Params>
        </AuditEvent>
      </AuditEvents>
    </AuditedApplication>
    ```
    `AuditedApplication` is the root element. `ApplicationId` identifies the name
    of the application that the audit event type is associated with. The database
    table created by the tenants API endpoint will derive it's name from `ApplicationId`.
    For each audit event defined, `TypeId` is a string identifier for the
    particular event (e.g. viewDocument) and `CategoryId` is a string identifier
    for the category of event. A list of parameter elements are then defined for
    each audit event. This includes the name of the parameter, the type (i.e.
    string, short, int, long, float, double, boolean or date), description and
    an optional `ColumnName` element which identifies an alternative database
    column to be used for storage in the event that multiple audit events
    comprise of parameters with the same name. The column names created by the
    API for audit event parameters is taken from either the `ColumnName` or `Name`.
    Each is also prefixed with 'eventParam'.

    #### Vertica Database Connection

    The API connects to the Vertica analytical database server via JDBC. The following connection
    properties need to be supplied:

    `database.url` - the Vertica database connection string URL with format:
    jdbc:vertica://VerticaHost:portNumber/databaseName

    `database.schema` - the logical schema of the new database table. E.g. public

    `database.username` - the name of the database user account. E.g. dbadmin

    `database.password` - the password of the database user account

    These can be provided through system environment variables or can be collectively
    initialized in a config.properties file with a new system environment variable created,
    `AUDIT_MANAGEMENT_API_CONFIG_PATH`, which points to the directory containing the properties
    file.

basePath: /v1
################################################################################
#                                   Paths                                      #
################################################################################
# The available paths and operations for the API.
paths:
  /applications:
    post:
      description: Used to register or modify application defined audit events XML in the Vertica database.
      consumes:
        - multipart/form-data
      parameters:
        - name: file
          type: file
          in: formData
          required: true
          description: XML file which defines the audit events in use by the application.
      responses:
        200:
          description: Ok
        400:
          description: Bad Request (missing database connection properties or unexpected/invalid XML)
        500:
          description: Internal server error
  /tenants:
    post:
      description: Used to register and create the Vertica database schema for a new tenant.
      parameters:
        - name: tenantId
          type: string
          in: query
          required: true
          description: Identifies the tenant.
        - name: application
          type: array
          in: query
          required: true
          description: Identifies the application(s) that the tenant is to be registered with.
      responses:
        200:
          description: Ok
        400:
          description: Bad Request (missing database connection properties)
        500:
          description: Internal server error