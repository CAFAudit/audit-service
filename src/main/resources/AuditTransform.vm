#set($namespace = $root.getRootElement().getNamespace())
#set($identifier = $root.getRootElement().getChild("ApplicationId",$namespace).getText())
#set($package = $packageName)
#set($space = " ")
#set($comma = ",")
#set($leftPar = "(")
#set($rightPar = ")")
#set($leftCurlyBracket = "{")
#set($rightCurlyBracket = "}")
#set($toString = "String.valueOf")
#set($newStringArray = "new String[] ")
#set($javadocParamsComment = "	 * @param")
#set($finalChannelArg = "final Channel channel")
#set($finalUserIdArg = "final String userId")
#set($final = "final ")
#set($channelJavaDocsComment = "	 * @param channel Identifies the channel to be used for message queuing ")
#set($userIdJavaDocsComment = "	 * @param userId Identifies the user who triggered the event ")

package $package;

import com.hpe.caf.auditing.AuditLogHelper;
import com.hpe.caf.util.rabbitmq.RabbitUtil;
import com.hpe.caf.worker.audit.AuditTask;
import com.rabbitmq.client.Channel;

import java.io.IOException;
import java.util.Date;

/**
 * Auto-generated class for writing $identifier events to the audit log
 */
public final class AuditLog
{
    private static final String APPLICATION_IDENTIFIER = "$identifier";
    private static final String QUEUE_NAME = "AuditEventQueue." + APPLICATION_IDENTIFIER;

    private AuditLog() {
    }

    /**
     * Checks that the AuditLog queue exists and creates it if it doesn't.
     * This function should be called before any of the audit... functions are called.
     */
    public static void ensureQueueExists(final Channel channel)
			throws IOException
    {
        RabbitUtil.declareWorkerQueue(channel, QUEUE_NAME);
    }

    ##
    ## For each audit event specified, generate code for auditing the actual event.
    ##
	#foreach($auditevent in $root.getRootElement().getChild("AuditEvents",$namespace).getChildren("AuditEvent",$namespace))
		##
		#set($methodNamePrefix = "audit")
		#set($typeId = $auditevent.getChild("TypeId",$namespace).getText())
		#set($upperCaseTypeId = "$typeId.substring(0, 1).toUpperCase()$typeId.substring(1)")
		#set($argList = "")
		#set($eventParamsList = "")
		#set($javadocParamsList = "")
		##
		## For each parameter specified, build up argument, javadoc and eventParams list.
		##
		#foreach($param in $auditevent.getChild("Params",$namespace).getChildren("Param",$namespace))
			#set($name = $param.getChild("Name",$namespace).getText())
			#set($type = $param.getChild("Type",$namespace).getText())
			##  Do not change case for supported primitive types.
			#if( $type == "short" || $type == "int" || $type == "long" || $type == "float")
                #set($upperCaseType = $type)
            #else
                #set($upperCaseType = "$type.substring(0, 1).toUpperCase()$type.substring(1)")
            #end
			#set($desc = $param.getChild("Description",$namespace).getText())
			##
			## Build up method argument list.
			##
			#if ( $argList != "" )
				#set($argList = "$argList$comma
		$final$upperCaseType$space$name")
			#else
				#set($argList = "$finalChannelArg$comma
		$finalUserIdArg$comma
		$final$upperCaseType$space$name")
			#end
			##
			## Build up event params list.
			##
			#if ( $eventParamsList != "" )
				#if ($type != "string")
				    #set($convertTypeToString = "$toString$leftPar$name$rightPar")
					#set($eventParamsList = "$eventParamsList$comma$convertTypeToString")
				#else
					#set($eventParamsList = "$eventParamsList$comma$name")
				#end
			#else
				#if ($type != "string")
				    #set($convertTypeToString = "$toString$leftPar$name$rightPar")
					#set($eventParamsList = "$newStringArray$leftCurlyBracket$convertTypeToString")
				#else
					#set($eventParamsList = "$newStringArray$leftCurlyBracket$name")			
				#end
			#end
			##
			## Build up javadoc list.
			##
			#if ( $javadocParamsList != "" )
				#set($javadocParamsList = "$javadocParamsList
$javadocParamsComment$space$name$space$desc$space")
			#else
				#set($javadocParamsList = "$javadocParamsList$channelJavaDocsComment
$userIdJavaDocsComment
$javadocParamsComment$space$name$space$desc$space")
			#end
		#end
		##
		#if ( $eventParamsList != "" )
			#set($eventParamsList = "$eventParamsList$rightCurlyBracket")
		#end
		##
		#set($methodDeclaration = "$methodNamePrefix$upperCaseTypeId
	$leftPar
		$argList
	$rightPar")

    /**
     * Audit the $typeId event
$javadocParamsList		 
     */
    public static void $methodDeclaration
     throws IOException
    {
        final AuditWorkerTask auditTask = AuditLogHelper.createAuditWorkerTask();
        auditTask.setApplicationId(APPLICATION_IDENTIFIER);
        auditTask.setUserId(userId);
        auditTask.setEventTypeId("$typeId");
        auditTask.setEventParams($eventParamsList);

        AuditLogHelper.sendAuditWorkerTask(channel, QUEUE_NAME, auditTask);
    }
	#end

}
